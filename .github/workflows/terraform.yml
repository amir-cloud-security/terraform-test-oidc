name: Terraform

on:
  push:

jobs:
  terraform:
    name: Terraform
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: read
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: us-east-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Terraform Init
        run: terraform init

      - name: Terraform Plan
        id: plan
        run: |
          terraform plan -no-color | tee tfplan.txt
        continue-on-error: false

      - name: Comment Terraform Plan on PR (even if push to PR branch)
        uses: actions/github-script@v7
        if: steps.plan.outcome == 'success' || steps.plan.outcome == 'failure'
        with:
          script: |
            const fs = require('fs');

            // Try to find the PR related to this push (if any)
            const prs = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              head: `${context.repo.owner}:${context.ref.replace('refs/heads/', '')}`,
              state: 'open'
            });

            if (!prs.data.length) {
              console.log("❌ No open PR found for this branch, skipping comment.");
              return;
            }

            const pr = prs.data[0]; // Use the first match (usually safe)

            const planOutput = fs.readFileSync('tfplan.txt', 'utf8');

            const summaryMatch = planOutput.match(/Plan: (\d+) to add, (\d+) to change, (\d+) to destroy./);
            const summary = summaryMatch
              ? `\`\`\`\nCreate: ${summaryMatch[1]}\nUpdate: ${summaryMatch[2]}\nDelete: ${summaryMatch[3]}\n\`\`\``
              : '⚠️ Could not parse summary from plan output.';

            const collapsedDetails = `<details>\n<summary>Show Plan Details</summary>\n\n\`\`\`hcl\n${planOutput.slice(0, 60000)}\n\`\`\`\n</details>`;

            const meta = `\n\nPusher: @${context.actor}, Branch: \`${context.ref.replace('refs/heads/', '')}\`, Workflow: \`${context.workflow}\``;

            const body = [
              "## Terraform Plan Summary",
              summary,
              collapsedDetails,
              meta
            ].join("\n");

            await github.rest.issues.createComment({
              issue_number: pr.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body
            });

      - name: Terraform Apply
        if: success() && github.event_name == 'push' && github.ref == 'refs/heads/main' && steps.plan.outcome == 'success'
        run: terraform apply -auto-approve
